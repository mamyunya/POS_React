// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// SaleStatusの選択肢
enum SaleStatus {
  NON_COMMIT  // 調理前
  IN_PROGRESS // 調理中
  SERVED      // 提供済み
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 商品モデル
model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  saleItems SaleItem[] // この商品が含まれる売上アイテムとの関連
}

// 売上モデル
model Sale {
  id            Int      @id @default(autoincrement())
  totalAmount   Int
  customerDetail String
  gender        String
  customerType  String
  createdAt     DateTime @default(now())

  status         SaleStatus   @default(NON_COMMIT) //商品提供前後のステータス（デフォルトは調理前）
  
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  
  saleItems SaleItem[] // この売上に含まれる商品アイテムとの関連
}

// 売上アイテムモデル (売上と商品の中間テーブル)
// どの売上で、どの商品が、何個、いくらで売れたかを記録する
model SaleItem {
  id          Int @id @default(autoincrement())
  saleId      Int
  productId   Int
  quantity    Int
  priceAtSale Int // 売上時点での商品価格（後で商品価格が変更されても影響を受けないように）

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([saleId, productId]) // 同じ売上に同じ商品は1行だけ
}


model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique // ユーザー名は重複不可
  password  String   
  createdAt DateTime @default(now())

  sales Sale[] // このユーザーが作成した売上一覧
}
